//
//  JavaWOGeneratorFactory.java
//  WSDL2JavaWO
//
//  Created by Victor Tsang on Sun Jan 19 2003.
//  Copyright (c) 2003 Victor Tsang. All rights reserved.
//

package com.villeo.app.wsdl2javawo;

import java.io.*;
import java.util.*;
import javax.wsdl.*;
import javax.xml.namespace.*;
import org.apache.axis.wsdl.gen.*;
import org.apache.axis.wsdl.*;
import org.apache.axis.wsdl.toJava.*;
import org.apache.axis.wsdl.symbolTable.*;

public class JavaWOGeneratorFactory extends JavaGeneratorFactory
{
  // to hold QNames for beans and arrays respectively
  protected HashMap _beanQNames=new HashMap();
  protected HashMap _arrayQNames=new HashMap();
  protected String _WOHelperClassName="WOHelper";
  
  public JavaWOGeneratorFactory(Emitter emitter)
  {
    super(emitter);
  }

  public String wohelperClassName()
  {
    return _WOHelperClassName;
  }

  public void setWOHelperClassName(String classname)
  {
    if(classname==null||classname.trim().length()==0)
      throw new IllegalArgumentException("Bad classname <"+classname+">.");

    _WOHelperClassName=classname;
  }
  
  public Generator getGenerator(TypeEntry typeEntry,SymbolTable symbolTable)
  {
    if(typeEntry.getDimensions().length()==0)
    {
      _beanQNames.put(typeEntry.getName(),typeEntry.getQName());
    }
    else
    {
      _arrayQNames.put(typeEntry.getName(),typeEntry.getQName());
    }
    
    return new JavaWOTypeWriter(emitter,typeEntry,symbolTable);
  }

  // should be called after Emitter.run().
  public void makeup()throws Exception
  {
    _generateWOHelper();
  }

  // generate WebObjects helper class
  protected void _generateWOHelper()throws IOException
  {
    String filename=emitter.getNamespaces().getAsDir(null)+_WOHelperClassName+".java";
    FileOutputStream f;
    
    if(emitter.isDebug())
      System.out.println("Generating WO helper "+filename);

    StringBuffer sb=new StringBuffer(256);

    _writeClassHeader(sb);
    _writeRegisterBeanSerializers(sb);
    _writeRegisterArraySerializers(sb);
    _writeClassFooter(sb);

    f=new FileOutputStream(filename,false);
    String content=sb.toString();
    f.write(content.getBytes());
    f.close();
  }

  protected void _writeClassHeader(StringBuffer sb)
  {    
    sb.append("// WebObjects helper class for the ease of calling\n")
      .append("// WOWebServiceClient.registerFactoriesForClassWithQName()\n")
      .append("//\n")
      .append("// generated by WSDL2JavaWO\n")
      .append("//\n\n")
      .append("package ").append(emitter.getPackageName()).append(";\n")
      .append("\n")
      .append("import javax.xml.namespace.QName;\n")
      .append("import com.webobjects.webservices.client.WOWebServiceClient;\n")
      .append("import org.apache.axis.encoding.ser.ArrayDeserializerFactory;\n")
      .append("import org.apache.axis.encoding.ser.ArraySerializerFactory;\n")
      .append("import org.apache.axis.encoding.ser.BeanDeserializerFactory;\n")
      .append("import org.apache.axis.encoding.ser.BeanSerializerFactory;\n")
      .append("\n")
      .append("public class ").append(_WOHelperClassName).append("\n")
      .append("{\n")
      .append("  private static void _registerBean(WOWebServiceClient client, Class bean, QName qname)\n")
      .append("  {\n")
      .append("    BeanSerializerFactory serializer=new BeanSerializerFactory(bean,qname);\n")
      .append("    BeanDeserializerFactory deserializer=new BeanDeserializerFactory(bean,qname);\n")
      .append("\n")
      .append("    client.registerFactoriesForClassWithQName(serializer,deserializer,bean,qname);\n")
      .append("  }\n\n")
      .append("  private static void _registerArray(WOWebServiceClient client, Class bean, QName qname)\n")
      .append("  {\n")
      .append("    client.registerFactoriesForClassWithQName(new ArraySerializerFactory(),new ArrayDeserializerFactory(),bean,qname);\n")
      .append("  }\n")
      .append("\n")
      .append("  public static void registerAll(WOWebServiceClient client)\n")
      .append("  {\n")
      .append("    registerBeanSerializers(client);\n")
      .append("    registerArraySerializers(client);\n")
      .append("  }\n")
      .append("\n");
  }

  protected void _writeClassFooter(StringBuffer sb)
  {
    sb.append("}\n\n// EOF\n\n\n");
  }

  protected void _writeRegisterBeanSerializers(StringBuffer sb)
  {
    sb.append("  public static void registerBeanSerializers(WOWebServiceClient client)\n  {\n");
    if(!_beanQNames.isEmpty())
    {
      Iterator itor=_beanQNames.keySet().iterator();
      while(itor.hasNext())
      {
        String className=(String)itor.next();
        QName qname=(QName)_beanQNames.get(className);

        sb.append("    _registerBean(client,")
          .append(className)
          .append(".class,new QName(\"")
          .append(qname.getNamespaceURI())
          .append("\",\"")
          .append(qname.getLocalPart())
          .append("\"));\n");
      }
    }
    sb.append("  }\n\n");
  }

  protected void _writeRegisterArraySerializers(StringBuffer sb)
  {
    sb.append("  public static void registerArraySerializers(WOWebServiceClient client)\n  {\n");
    if(!_arrayQNames.isEmpty())
    {
      Iterator itor=_arrayQNames.keySet().iterator();
      while(itor.hasNext())
      {
        String className=(String)itor.next();
        QName qname=(QName)_arrayQNames.get(className);

        sb.append("    _registerArray(client,")
          .append(className)
          .append(".class,new QName(\"")
          .append(qname.getNamespaceURI())
          .append("\",\"")
          .append(qname.getLocalPart())
          .append("\"));\n");
      }
    }
    sb.append("  }\n");
  }
}
